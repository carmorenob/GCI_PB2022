$PBExportHeader$f_calcula_tsup_sem.srf
global type f_calcula_tsup_sem from function_object
end type

forward prototypes
global function integer f_calcula_tsup_sem (string tipodoc, string documento, datetime fecha_dom, string codtsup, integer mes)
end prototypes

global function integer f_calcula_tsup_sem (string tipodoc, string documento, datetime fecha_dom, string codtsup, integer mes);long h_base, horas, i, k, f, resto, item, ano, h_dom, h_comp
boolean crea, fraccionado, base, salga
datetime f_tmp
string msg
uo_dataStore dw_def, dw_he, dw_prg, dw_aus

st_interfec a, b, r, aus

dw_def = create uo_dataStore
dw_def.DataObject = 'dw_tsup_def'
dw_def.SetTransObject(SQLCA)
dw_def.Retrieve(codtsup)

dw_prg = create uo_dataStore
dw_prg.DataObject = 'dw_programa_emp_sem'
dw_prg.SetTransObject(SQLCA)

dw_aus = create uo_dataStore
dw_aus.DataObject = 'dw_ausentismo'
dw_aus.SetTransObject(SQLCA)

dw_he = create uo_dataStore
dw_he.DataObject = 'dw_tsup'
dw_he.SetTransObject(SQLCA)
ano = year(date(fecha_dom))
select horas_base into :h_base from NOM_ESQUEMA_TSUP
where codtsup = :codtsup;
IF SQLCA.SQLCode = -1 THEN
	msg = SQLCA.SQLErrText
	Rollback;
	MessageBox("SQL error", msg)
	Return -1000
END IF

dw_prg.Retrieve(tipodoc,documento,date(fecha_dom))
dw_aus.Retrieve(tipodoc,documento,'%')
horas = 0
if dw_prg.RowCount() = 0 then
	item = 0
else
	select max(item) into :item from nom_tsup
	where tipodoc=:tipodoc and documento=:documento and ano=:ano and mes=:mes;
	IF SQLCA.SQLCode = -1 THEN
		msg = SQLCA.SQLErrText
		Rollback;
		MessageBox("SQL error", msg)
		Return -1000
	END IF
	if isNull(item) then item = 0
end if
long ret
for i = 1 to dw_prg.RowCount()
	salga = FALSE
	a.x = dw_prg.GetItemDateTime(i,'inicio')
	a.y = dw_prg.GetItemDateTime(i,'fin')

	horas = horas + dw_prg.GetItemNumber(i,'horas')
	
	if dw_prg.GetItemString(i,'hextra') = '0' then
		dw_def.SetFilter("recargo = 1")
		dw_def.Filter()
	else
		ret = dw_def.SetFilter("(recargo = 0) and (compensa=0 or (isNull(recargo)) ) ")
		ret = dw_def.Filter()
	end if
	if dw_prg.GetItemString(i,'compensa') = '1' then
		ret = dw_def.SetFilter("(compensa=1) ")
		ret = dw_def.Filter()
	end if
	
	for k = 1 to dw_aus.RowCount()
		aus.x = datetime(dw_aus.GetItemDate(k,'fechaini'))
		aus.y = dateTime(date(dw_aus.GetItemDate(k,'fechafin')),time('23:59'))
		r = interseccion(a,aus)
		if not(isNull(r.x) or isNull(r.y)) then 
			dw_prg.SetItem(i,'calculado','1')
			salga = TRUE
			EXIT
		end if
		// Esta ausente no aplica Extras ni Recargos
	next
	
	if salga then Continue
	if dw_prg.GetItemString(i,'calculado')  = '1' or month(date(a.x)) <> mes then 
		//dw_prg.SetItem(i,'calculado','1')
		CONTINUE
	end if
	if dayNumber(date(a.x)) = 1 and dw_prg.GetItemString(i,'hextra') = '0' then h_dom = h_dom  + Hour(Time(a.y)) - Hour(time(a.x)) + 1 // Dominical para compensatorios
	if festivo(a.x) and dayNumber(date(a.x)) > 1 and dw_prg.GetItemString(i,'hextra') = '0' then h_dom = h_dom  + Hour(Time(a.y)) - Hour(time(a.x)) + 1 // Festivo para compensatorios
	if dw_prg.GetItemString(i,'compensa') = '1' then 
		h_comp = h_comp + Hour(Time(a.y)) - Hour(time(a.x)) + 1 // Compensatorios
	end if

	for k = 1 to dw_def.RowCount()
		crea = FALSE
		b.x = datetime(date(a.x),time(dw_def.GetItemDateTime(k,'horaini')))
		b.y = datetime(date(a.x),time(dw_def.GetItemDateTime(k,'horafin')))
		r = interseccion(a,b)
		if not(isNull(r.x) or isNull(r.y)) then
			if dw_def.GetItemNumber(k,'dia') = 1 and (dayNumber(date(r.x)) = 1 or festivo(r.x)) then
				crea = TRUE
			elseif dw_def.GetItemNumber(k,'dia') = 0 and dayNumber(date(r.x)) > 1 and not festivo(r.x) then
				crea = TRUE
			end if
			if crea then
				if ano < year(date(r.x)) then
					ano = year(date(r.x))
					select max(item) into :item from nom_tsup
					where tipodoc=:tipodoc and documento=:documento and ano=:ano and mes=:mes;
					IF SQLCA.SQLCode = -1 THEN
						msg = SQLCA.SQLErrText
						Rollback;
						MessageBox("SQL error", msg)
						Return -1000
					END IF
					if isNull(item) then item = 0
				end if
				item = item + 1
				f = dw_he.InsertRow(0)
				dw_he.SetItem(f,'tipodoc',tipodoc)
				dw_he.SetItem(f,'documento',documento)
				dw_he.SetItem(f,'ano',ano)
				dw_he.SetItem(f,'mes',mes)
				dw_he.SetItem(f,'item',item)
//				dw_he.SetItem(f,'horas',Hour(Time(r.y)) - Hour(time(r.x)) + 1)
				dw_he.SetItem(f,'horas', round(secondsAfter(time(r.x),time(r.y))/3600,1))
				dw_he.SetItem(f,'fecha_ini',r.x)
				dw_he.SetItem(f,'fecha_fin',r.y)
				dw_he.SetItem(f,'cod_concep',dw_def.GetItemString(k,'cod_concep'))
				dw_he.SetItem(f,'estado','1')
				dw_he.SetItem(f,'clugar',dw_prg.GetItemString(i,'clugar'))
				dw_he.SetItem(f,'ufuncional',dw_prg.GetItemString(i,'ufuncional'))
				dw_he.SetItem(f,'ccosto',dw_prg.GetItemString(i,'ccosto'))
			end if
		end if
	next

	dw_prg.SetItem(i,'calculado','1')
next

if dw_he.Update() = -1 then
	Rollback;
	Return -1000
end if

if dw_prg.Update() = -1 then
	Rollback;
	Return -1000
end if
commit;
Return h_dom - h_comp

end function

